/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    YourContract: {
      address: "0xa15bb66138824a1c7167f5e85b957d04dd34e468",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_owner",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "receive",
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "greeting",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "premium",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "setGreeting",
          inputs: [
            {
              name: "_newGreeting",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "totalCounter",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "userGreetingCounter",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "withdraw",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "GreetingChange",
          inputs: [
            {
              name: "greetingSetter",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newGreeting",
              type: "string",
              indexed: false,
              internalType: "string",
            },
            {
              name: "premium",
              type: "bool",
              indexed: false,
              internalType: "bool",
            },
            {
              name: "value",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
      ],
      inheritedFunctions: {},
      deploymentFile: "run-1751725717.json",
      deploymentScript: "Deploy.s.sol",
    },
    TratoHechoP2P: {
      address: "0xb19b36b1456e65e3a6d514d3f715f204bd59f431",
      abi: [
        {
          type: "constructor",
          inputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "acceptOrder",
          inputs: [
            {
              name: "orderId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "acceptOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "cancelOrder",
          inputs: [
            {
              name: "orderId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "completeOrder",
          inputs: [
            {
              name: "orderId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "createSellOrder",
          inputs: [
            {
              name: "amountUSDC",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "priceBOB",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "deadline",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "orderId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "gasLimit",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getAvailableOrders",
          inputs: [
            {
              name: "limit",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "orderIds",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getOrder",
          inputs: [
            {
              name: "orderId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "order",
              type: "tuple",
              internalType: "struct TratoHechoP2P.Order",
              components: [
                {
                  name: "id",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "seller",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "buyer",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "amountUSDC",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "priceBOB",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "status",
                  type: "uint8",
                  internalType: "enum TratoHechoP2P.OrderStatus",
                },
                {
                  name: "createdAt",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "deadline",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getOrdersByBuyer",
          inputs: [
            {
              name: "buyer",
              type: "address",
              internalType: "address",
            },
            {
              name: "limit",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "orderIds",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getOrdersBySeller",
          inputs: [
            {
              name: "seller",
              type: "address",
              internalType: "address",
            },
            {
              name: "limit",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "orderIds",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getRequestIdentity",
          inputs: [
            {
              name: "requestId",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "identity",
              type: "tuple",
              internalType: "struct TratoHechoP2P.RequestIdentity",
              components: [
                {
                  name: "orderId",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "requester",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "referenceId",
                  type: "string",
                  internalType: "string",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "handleOracleFulfillment",
          inputs: [
            {
              name: "requestId",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "response",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "err",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "markExpired",
          inputs: [
            {
              name: "orderId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "nextOrderId",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "orders",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "id",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "seller",
              type: "address",
              internalType: "address",
            },
            {
              name: "buyer",
              type: "address",
              internalType: "address",
            },
            {
              name: "amountUSDC",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "priceBOB",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "status",
              type: "uint8",
              internalType: "enum TratoHechoP2P.OrderStatus",
            },
            {
              name: "createdAt",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "deadline",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "requestToOrder",
          inputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "orderId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "requester",
              type: "address",
              internalType: "address",
            },
            {
              name: "referenceId",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "setGasLimit",
          inputs: [
            {
              name: "_gasLimit",
              type: "uint32",
              internalType: "uint32",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "usdcToken",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IERC20",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "verifyPayment",
          inputs: [
            {
              name: "orderId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "subscriptionId",
              type: "uint64",
              internalType: "uint64",
            },
            {
              name: "referenceId",
              type: "string",
              internalType: "string",
            },
            {
              name: "apiKey",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [
            {
              name: "requestId",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "OrderAccepted",
          inputs: [
            {
              name: "orderId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "buyer",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "seller",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OrderCancelled",
          inputs: [
            {
              name: "orderId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OrderCompleted",
          inputs: [
            {
              name: "orderId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "seller",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "buyer",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "amountUSDC",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OrderCreated",
          inputs: [
            {
              name: "orderId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "seller",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "amountUSDC",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "priceBOB",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "deadline",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OrderExpired",
          inputs: [
            {
              name: "orderId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferRequested",
          inputs: [
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PaymentVerificationRequested",
          inputs: [
            {
              name: "orderId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "requestId",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "requester",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PaymentVerified",
          inputs: [
            {
              name: "orderId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "verified",
              type: "bool",
              indexed: false,
              internalType: "bool",
            },
            {
              name: "requestId",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "RequestFulfilled",
          inputs: [
            {
              name: "id",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "RequestSent",
          inputs: [
            {
              name: "id",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "EmptyArgs",
          inputs: [],
        },
        {
          type: "error",
          name: "EmptySource",
          inputs: [],
        },
        {
          type: "error",
          name: "InsufficientUSDCBalance",
          inputs: [
            {
              name: "seller",
              type: "address",
              internalType: "address",
            },
            {
              name: "required",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "available",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "InvalidAmount",
          inputs: [
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "InvalidDeadline",
          inputs: [
            {
              name: "deadline",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "InvalidOrderStatus",
          inputs: [
            {
              name: "orderId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "expected",
              type: "uint8",
              internalType: "enum TratoHechoP2P.OrderStatus",
            },
            {
              name: "actual",
              type: "uint8",
              internalType: "enum TratoHechoP2P.OrderStatus",
            },
          ],
        },
        {
          type: "error",
          name: "NoInlineSecrets",
          inputs: [],
        },
        {
          type: "error",
          name: "OnlyRouterCanFulfill",
          inputs: [],
        },
        {
          type: "error",
          name: "OrderAlreadyExpired",
          inputs: [
            {
              name: "orderId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "OrderNotFound",
          inputs: [
            {
              name: "orderId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "UnauthorizedAccess",
          inputs: [
            {
              name: "caller",
              type: "address",
              internalType: "address",
            },
            {
              name: "expected",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "UnexpectedRequestID",
          inputs: [
            {
              name: "requestId",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
        },
      ],
      inheritedFunctions: {},
      deploymentFile: "run-1751725717.json",
      deploymentScript: "Deploy.s.sol",
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
